                    UniFlash's version 1.15 documentation.
                    --------------------------------------
               (C) 1997 Pascal Van Leeuwen and Galkowski Adam

0.0            DISCLAIMER
-------------------------
WARNING:
THIS PROGRAM COMMUNICATES WITH THE CHIPSET AND FLASH ROM CHIP AT THE LOWEST
HARDWARE LEVEL. WE INFORM YOU THAT THE PURPOSE OF THIS PROGRAM MAY BE
DANGEROUS TO YOUR COMPUTER'S BIOS IF NOT USED PROPERLY. THEREFORE USE IT AT
YOUR OWN RISK:  WE (THE AUTHORS) ARE _NOT_RESPONSIBLE_ FOR ANY DAMAGE THIS
PROGRAM MAY CAUSE TO YOU !!!.


0.1            COPYRIGHT and CO.
--------------------------------

This program is public domain. You may do whatever you want with it: copy it,
delete it, rip it, modify it, etc...
If you do something with it, it would be great if you credited us.


1.0            UniFlash? UNIFLASH??? What the HELL is it ??!!!
--------------------------------------------------------------

UniFlash is a flash program, used to write a new BIOS on your FLASH ROM Chip.
What's new there? , you may ask, there are already programs like this on
InterNet made by BIG BRANDS like AMI, AWARD or MR. Well... there is only a
little difference: COMPLETE, WORKING SOURCE CODE IN PASCAL IS GIVEN FOR FREE!!

Another thing: this flasher is mainly destinated for fearless people and
experienced users. If it's your first adventure with flashing your BIOS, we
recommend you strongly using these brand flashers. You'll have to understand
we are just experienced computer users/programmers and we haven't materially
the possibility to test every routine and chips we haven't. That's the main
reason we release it. We hope people may help us in debugging and testing
routines.
NOTE by PvL: Brand name flashers have a tendency to be unstable (this is
             especially true for AWDFLASH, which f*cked up my BIOS twice
             so far, leaving me no other choice than to hot-flash) so if
             you happen to be the lucky owner of one of the TESTED flash
             chips I can really recommend using UNIFLASH instead ...


2.0            What hardware do I need for UniFlash ?
-----------------------------------------------------

Here's the minimum configuration you need to run UniFlash:
       -At least a 386 (The whole thing works in flat real mode)
       -MS DOS 4.0 and higher
       -A well known flash rom chip (SST,WinBond,Atmel,Intel)
       -An Intel Triton chipset (fx,vx,hx,tx,...) or a
        VIA Appollo chipset (experimental, not tested ...)


3.0            What flash chips are supported by UniFlash ?
-----------------------------------------------------------

UniFlash supports the following flash chips:
(* means tested and functional, the rest has not been tested (yet),
note that a lot of chips are very similar to one another though, so
if one of them works then the rest should work fine too)

                AMD
                ---
                Am29F100T
               *Am29F010
                Am29F080B
                Am29F400AT
                Am29F400BT
                Am29LV004T
                Am29LV400T
                Am29F400AB
                Am29F400BB
                Am29LV004B
                Am29LV400B
                Am29F002T
                Am29F002NT
                Am29F200AT
                Am29LV200T
                Am29LV002T
                Am29F002B
                Am29F002NB
                Am29F200AB
                Am29LV200B
                Am29LV002B
                Am29F040B
                Am29F800BT
                Am29F800BB
                Am28F010
                Am28F010A
                Am28F020
                Am28F020A
                Am28F256
                Am28F256A
                Am28F512
                Am28F512A

                SST
                ---
                28x040 series
               *29EE010
                29x010 series
                29EE020
                29x020 series
                29x512 series
                29EE512
                28EE011

                Winbond
                -------
               *W29EE011
                W29C020
                W29EE512
                W29C101

                Atmel
                -----
                AT49BV010
                AT49F1025
                AT49x020 series
                AT49F040
                AT49F010
                AT49F080
                AT29C040A
                AT29C1024
                AT29LV1024
                AT49F080T
                AT29xV010A series
                AT29xV020 series
                AT29LV256
                AT29xV040A series
                AT29C010A
                AT29C020
                AT29C256
                AT29C257
                AT29C512

                Intel
                -----
               *28F001BX-T
               *28F001BN-T
                28F001BX-B
                28F001BN-B
                28F200-T series
                28F200-B series
                28F002-T series
                28F002-B series

                Catalyst
                --------
                CAT28F150T
                CAT28F150B
                CAT28F001T
                CAT28F001B
                CAT28F002T
                CAT28F002B

                Macronix (experimental, still no datasheets :()
                --------
                MXIC28F1000AP
                MXIC28F1000P


4.0            Help! I don't understand the sources !!!
-------------------------------------------------------

If you have problems understanding something mail us (address at the end).


5.0            Expert mode
--------------------------

We included something called expert mode. If you're just a user don't enter
it (unless you have to ...).  The expert mode adds some new functions that
allow you to overwrite the bootblock (which is not normally possible) -
plus some other advanced fuctions.
To enter expert mode type "uniflash /EXPERT".
NOTE: Sometimes it may actually be NECESSARY to overwrite the bootblock because
      one BIOS mfg's bootblock may very well be incompatible with another
      BIOS mfg's BIOS ! (this is usually the case when you get a 'BOOTBLOCK
      MISMATCH' error message ...)

5.1            Making an emergency disk
---------------------------------------

It is always nice to have an emergency disk handy in case something goes
wrong. You see, most flash BIOS's incorporate something called a 'boot block'
and UNIFLASH will not normally overwrite it so it remains intact.
The boot block contains just enough code to boot up your computer with basic
peripheral support to enable you to flash in a working BIOS in case something
went wrong.

To make an emergency disk one would do the following:
-make a system disk using "format a: /S"
-copy uniflash to that disk
-copy a working bios image (preferably a backup that was made while the system
 was still a-ok) to the disk
-make an AUTOEXEC.BAT containing:
@UNIFLASH -E <name of BIOS image file>

(NOTE: Whatever you do, do *NOT* load HIMEM.SYS. The boot block lacks support
       routines that HIMEM.SYS requires, resulting in very nice crashes.
       And I know from experience ... !! In general, keep the boot disk as
       clean as possible (just the way it is after "format a: /S")            )

Make sure UNIFLASH and the BIOS image are on the disk as the boot block only
supports the floppy drive, you won't be able to access any harddrive !!
When you boot from this emergency disk the working BIOS image will
automatically (without any intervention by you) be flashed into the flash ROM
by UNIFLASH. This is very convenient as the boot block has no support for PCI
video cards, so you won't be able to SEE anything in the process unless you
replace your PCI videocard with an old ISA one (hint!).
UNIFLASH will give you some audible feedback, though:

first short beep: UNIFLASH invoked, reading BIOS image
second short beep: done reading BIOS image, starting to flash
double short beep: done flashing, reset your system
long continuous beep: some error occured, press any key to retry operation


6.0            How to support UniFlash?
---------------------------------------

If you want to help us in adding support for new chips, in testing the whole
thing or bugfixing, mail us BOTH!!, we'll put your name in credits at the end.

7.0            Credits
---------------------------------------

Pascal van Leeuwen - Made first design, chipset handling routines, a primitive
write function for SST, WINBOND and INTEL, added flat real mode, etc...
Improved SST & Winbond routines, made AMD routines work, added Atmel support,
added lots & lots of flash chips (of which most are currently untested ...)
Added reliability improvements (backup of old BIOS, verify after write)
Tested both Winbond & SST chips, became an expert at hot-flashing ;-)

Galkowski Adam - Initiated the UniFlash project, made modular structure, made
the current design, added functions handling DMI, PnP and bootblock, added
expert mode, made the previous crappy AMD support, wrote this doc, tested SST
routines, had multiple rendez-vous with "Award BootBlock BIOS",
advertised, etc...



8.0            How to contact us
--------------------------------

If you want to contact us, please write to BOTH of us (send the same letter at
two different addresses) with the subject UNIFLASH project.

- Pascal van Leeuwen
web    : http://ourworld.compuserve.com/homepages/pvanleeuwen/homepage.htm
email  : pvanleeuwen@compuserve.com
         or
         9896043@stud.rhij.nl

- Galkowski Adam
email  : 100665.2705@compuserve.com

BTW: New versions should be on
     http://ourworld.compuserve.com/homepages/pvanleeuwen/uniflash.htm
     The source code can be found there, too.

9.0            Revision info
----------------------------
1.15           -Fixed problems with AMD flash chips (I hope)
               -Added VIA 82C570 chipset support
               -Tested Intel 28F001BX-T/28F001BN-T support
                (needs some further testing though ...)
               -Cleanup up (non-XMS) extended memory allocation
1.14           -Added Macronix support
               -Added SST 28EE011 flash chip
               -Added AMD Am28F010, Am28F010A, Am28F020, Am28F020A, Am28F256
                Am28F256A, Am28F512 and Am28F512A flash chips
               -Removed valid PCI ROM check so it is possible to flash a
                ROM on a PCI card that does not (yet) contain a valid ROM
               -Added some safety stuff:
                -cache disabled during flashing (having the cache enabled
                 seems to be a problem with some Cyrix chips (or chip/chipset
                 combo's ?))
                -interrupts now fully disabled during actual communication with
                 the flash chip for increased reliability
               -added multiple flash chips/single ROM image support
                (experimental)
1.13           -Added Catalyst support
               -Added OPTi chipset support (for 82C750 'Vendetta')
               -Added Intel 28F400/28F004 flash chips
               -Completely rewrote PCI option ROM support (still experimental)
1.12           -Fixed problem ID-ing Intel chips (oops)
               -Made first attempt at supporting PCI option ROMS (experimental)
1.11           -Added Atmel support
1.1            -Fixed memory allocation bug with sectored (Intel,AMD) flash ROM
                chips
               -Added VIA chipset support
1.0            -First public release
